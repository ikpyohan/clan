#include<stdio.h>

int main(void)
{
 printf("To C, or not to C: that is the question.\n");

 return 0;
}
#include는 C의 표준 입출력 라이브러리에 대한 정보를 첨가include하기 위해 필요한 줄이다. 

프로그램에서 사실상 실행되는 코드는 main에 존재하고, 말 그대로 대표main 프로그램을 의미한다. 
main 안에 유일한 명령어는 원하는 자료를 출력해주는 printf라는 함수이다. 
printf는 표준 입출력 라이브러리에 내장된 함수로, 데이터를 깔끔하게 출력해준다. 

return 0;은 프로그램이 종료될 때 운영체제에 0이라는 값을 넘긴다, 혹은 반환return한다는 것을 의미한다.

코드를 컴퓨터가 실행할수 있는 코드로 만들기 위해선 3가지 과정이 필요하다.

1.전처리Preprocessing. 프로그램은 우선 전처리기preprocessor에 보내지는데, 전처리기는 #으로 시작하는 지시어directive로 알려진 줄들의 지시를 먼저 따른다. 전처리기는 마치 에디터와 같다고 볼 수 있다. 프로그램에 무언가를 추가하고, 수정을 할 수 있기 때문이다.

2.컴파일Compiling. 수정된 프로그램은 이제 컴파일러compiler로 보내지는데, 여기서 코드는 기계어 명령문(목적 코드object code)으로 번역이 된다. 번역했지만, 그래도 아직은 프로그램을 실행할 순 없다.

3.링킹Linking. 마지막 단계에선 링커linker가 컴파일에 의해 생성된 목적 코드를 프로그램을 완벽하게 실행하기 위해 필요한 추가적인 코드와 합친다. 이 추가적인 코드는 보통 프로그램에 사용되는 라이브러리 내부의 명령문을 의미한다. 위의 코드를 예시로 들면 printf가 되겠다.

다행히도 이 과정은 전부 자동으로 처리가 되기 때문에 부담 가질 필요는 없다. 사실 전처리 과정도 컴파일러에 보통 추가되어있어서 사실 전처리가 진행되고 있다는 사실조차 모를 수도 있다. 컴파일과 링크를 하기 위한 명령들은 컴파일러에 따라, 그리고 운영체제에 따라 다르다. UNIX에선 C 컴파일러가 보통 cc라고 불리는데, 그렇기 때문에 pun.c를 컴파일하기 위해선 터미널이나 커맨드 라인 창에 다음과 같은 명령문을 입력해야 한다.

% cc pun.c

UNIX에서 %란 프롬프트를 의미한다. 이건 사용자가 입력해야 하는 건 아니다. cc를 이용하면 링킹은 자동으로 이뤄진다. 굳이 링크를 위한 또 다른 명령문이 필요하지 않다.

컴파일과 링킹이 끝나면, cc는 실행 가능한 프로그램을 보통 기본 설정에 따라 a.out이라는 이름으로 만들어낸다. 
