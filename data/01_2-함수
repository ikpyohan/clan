함수는 마치 다른 언어에서 흔히 말하는 절차procedure나 서브루틴subroutine과 비슷하다. 
함수는 프로그램을 건설할 때 쓰이는 벽돌과도 같은 것이다. 사실 C 프로그램은 이러한 벽돌들의 집합이라고 할 수 있을 것이다. 
함수는 보통 두 가지로 나뉘는데, 하나는 프로그래머가 직접 제작한 함수이고, 다른 하나는 C에서 제공할 수 있는 함수이다. 후자는 컴파일러가 제공하는 라이브러리에 속하는 함수이기 때문에 이를 라이브러리 함수library function이라고도 부른다. 
함수라는 명칭은 수학에서 유래된 명칭이다. 함수란 하나 혹은 두 개 이상의 정의역에 대해 치역을 만들어내는 규칙이라고 할 수 있다.

f(x) = x + 1 g(y, z) = y^2 - z^2

C에서 사용하는 함수라는 명칭은 좀 더 광범위하다. C에서 함수란 단순히 이름이 주어진 집합화된 여러 개의 구문을 의미한다. 
어느 함수들은 값을 연산해내고, 어느 함수들은 연산하지 않는다. 전자의 경우 return이라는 구문을 통해 그 함수가 어떤 값을 "반환return"하는지 명시해준다. 
예를 들자면 입력값에 1을 더하는 함수가 존재한다면 다음과 같은 구문을 짜야 할 것이다.

return x + 1;

만약 함수가 두 개의 입력값을 받아 각각의 제곱의 차를 구하는 함수라면 다음과 같이 구문을 짤 것이다.

return y * y - z * z;

C 프로그램을 제작할 때 여러 가지 함수를 사용할 수는 있겠으나, main 함수만은 필수적으로 들어가야 한다. main 함수는 특별한 함수이다. 프로그램이 실행될 때 자동으로 실행되는 함수이기 때문이다.

main이라는 이름은 매우 중요하기 때문에 begin이나 end, 심지어는 MAIN으로 이 함수를 호출할 수 없다.

#include 

int main(void)
{
 printf("To C, or not to C: that is the question.\n");

 return 0;
}
int라는 단어가 main 바로 직전에 나오는데, 이는 main 함수가 정숫값을 반환한다는 것을 의미한다. 괄호 안에 보이는 void라는 단어는 main 함수가 입력값을 요구하지 않을 때 사용한다.

return 0; 은 두 가지 효과가 있는데, 첫 번째로는 main 함수가 종료시키고(당연히 프로그램 또한 중단될 것이다) 두 번째로는 0이라는 값을 반환한다.

main 함수를 사용한다면 언제나 0이라는 값을 반환하도록 프로그래밍하도록 하자. 이는 일반적인 프로그램 종료를 의미한다.